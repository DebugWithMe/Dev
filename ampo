import { ActuatorEnvironmentTabEnum, ActuatorViewTabEnum } from '../support/enums/actuator-monitor.enum';

export class ActuatorMonitorPo {
  // --- Main Page Elements ---
  getContainer() {
    return cy.get('[data-cy="actuator-monitor-container"]');
  }

  getEnvironmentTab(env: ActuatorEnvironmentTabEnum | string) {
    // Assuming env parameter matches the value used in data-cy (e.g., 'dev', 'e2e')
    return cy.get(`[data-cy="env-tab-${env.toString().toLowerCase()}"]`);
  }

  getViewTab(view: ActuatorViewTabEnum | string) {
    // Converts "Scheduled Tasks" or ActuatorViewTabEnum.SCHEDULED_TASKS to "scheduledtasks" for the selector
    const viewSelectorPart = view.toString().toLowerCase().replace(/\s+/g, '');
    return cy.get(`[data-cy="view-tab-${viewSelectorPart}"]`);
  }

  getRefreshButton() {
    return cy.get('[data-cy="refresh-btn"]');
  }

  getLoadingContainer() {
    return cy.get('[data-cy="loading-container"]');
  }

  getActiveEnvironmentTab() {
    // Relies on the .active class or aria-pressed for identifying active tab
    return cy.get('[data-cy^="env-tab-"]').filter('.active');
    // Alternative: cy.get('[data-cy^="env-tab-"][aria-pressed="true"]');
  }

  getActiveViewTab() {
    return cy.get('[data-cy^="view-tab-"]').filter('.active');
    // Alternative: cy.get('[data-cy^="view-tab-"][aria-pressed="true"]');
  }

  getContentArea() {
    return cy.get('[data-cy="content-area"]');
  }

  // --- Error and Message Handling ---
  getGeneralErrorAlert() {
    return cy.get('[data-cy="general-error-alert"]');
  }

  getRetryAllButton() {
    return cy.get('[data-cy="retry-all-btn"]');
  }

  getViewErrorAlert(view: ActuatorViewTabEnum | string) {
    const viewSelectorPart = view.toString().toLowerCase().replace(/\s+/g, '');
    return cy.get(`[data-cy="view-error-alert-${viewSelectorPart}"]`);
  }

  getViewTabErrorIndicator(view: ActuatorViewTabEnum | string) {
    const viewSelectorPart = view.toString().toLowerCase().replace(/\s+/g, '');
    return cy.get(`[data-cy="view-tab-error-indicator-${viewSelectorPart}"]`);
  }

  getNoDataOverviewMessage() {
    return cy.get('[data-cy="no-data-overview"]');
  }

  getNoDataForViewMessage(view: ActuatorViewTabEnum | string) {
    const viewSelectorPart = view.toString().toLowerCase().replace(/\s+/g, '');
    return cy.get(`[data-cy="no-data-view-${viewSelectorPart}"]`);
  }

  getEnvNotLoadedMessage() {
    return cy.get('[data-cy="no-data-env-not-loaded"]');
  }

  // --- Child Component Locators ---
  getOverviewDisplayComponent() {
    return cy.get('[data-cy="overview-display-component"]');
  }

  getActuatorDisplayComponent() {
    return cy.get('[data-cy="actuator-display-component"]');
  }

  // --- Combined Actions (from previous version, still valid) ---
  verifyActuatorMonitorIsVisible() {
    this.getContainer().should('be.visible');
  }

  selectEnvironment(env: ActuatorEnvironmentTabEnum) {
    this.getEnvironmentTab(env).click();
    this.getEnvironmentTab(env).should('have.class', 'active'); // Or check aria-pressed
  }

  selectView(view: ActuatorViewTabEnum) {
    this.getViewTab(view).click();
    this.getViewTab(view).should('have.class', 'active'); // Or check aria-pressed
  }
}
